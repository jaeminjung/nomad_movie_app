{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","summary","map","index","key","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","console","log","stop","this","fetch","then","response","json","data","catch","err","_renderMovies","movie","src_Movie","medium_cover_image","genres","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAwDA,SAASA,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAQK,UAAU,iBAIpC,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,eAAhB,IAAgCG,EAAhC,KAoBOC,MA9Df,SAAAC,GAAgD,IAA/BC,EAA+BD,EAA/BC,MAAOX,EAAwBU,EAAxBV,OAAQQ,EAAgBE,EAAhBF,MAAOI,EAASF,EAATE,QACnC,OACIX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACXJ,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQA,KAEzBC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAf,UACYM,EACRV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACVG,EAAMK,IAAI,SAACL,EAAOM,GAAR,OACXb,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAGnCb,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAAb,aACeO,MCYhBI,6MA3CbC,MAAQ,KAGRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAAnB,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,WAEFU,QAAQC,IAAIL,EAAKT,OALN,wBAAAM,EAAAS,SAAAb,EAAAc,WAQbN,SAAW,WACT,OAAOO,MAAM,yDACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKlB,SACvBmB,MAAM,SAAAC,GAAG,OAAIV,QAAQC,IAAIS,QAO5BC,cAAgB,WASd,OARaf,EAAKT,MAAMG,OAAOP,IAAI,SAAA6B,GACjC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CACPhC,MAAO+B,EAAM/B,MACbX,OAAQ0C,EAAME,mBACdpC,MAAOkC,EAAMG,OACbjC,QAAW8B,EAAM9B,QACjBG,IAAK2B,EAAMI,2FAVbb,KAAKf,8CAgBL,OACEjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACZ4B,KAAKhB,MAAMG,OAASa,KAAKQ,gBAAkB,kBAtClCM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.b45695ae.chunk.js","sourcesContent":["import React from 'react';\nimport './Movie.css'\nimport PropTypes from 'prop-types'\n\n// class Movie extends Component{\n\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string.isRequired\n//     }\n\n//     render(){\n//         // console.log(this.props)\n//         return(\n//             <div>\n//                 <MoviePoster poster={this.props.poster}/>\n//                 <h3>movie title: {this.props.title} </h3>\n//             </div>\n//         ) \n//     }\n// }\n\nfunction Movie ({title, poster, genre, summary}){\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie_columns\">\n                <MoviePoster poster={poster}/>\n            </div>\n            <div className=\"Movie_columns\">\n                title: {title}\n                <div className=\"Movie_genre\">\n                    {genre.map((genre, index)=> \n                    <MovieGenre genre={genre} key={index}/> \n                     )}\n                </div> \n                <p className=\"Movie_summary\">\n                    summary : {summary}\n                </p>\n            </div>\n        </div>\n    )\n}\n\n\n// class MoviePoster extends Component{\n//     static propTypes = {\n//         poster:PropTypes.string.isRequired\n//     }\n//     render(){\n//         // console.log(this.props)\n//         return(\n//             <img src={this.props.poster}></img>\n//         )\n//     }\n// }\n\nfunction MoviePoster({poster}){\n    return (\n        <img src={poster} className=\"Movie_poster\"></img>\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie_genre\"> {genre} </span>\n    )\n}\n\nMovieGenre.propTypes = {\n    genre: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n    poster:PropTypes.string.isRequired\n}\n\nMovie.propTypes = {\n    title:PropTypes.string.isRequired,\n    poster:PropTypes.string.isRequired,\n    genre: PropTypes.array.isRequired,\n    summary:PropTypes.string.isRequired\n}\n\n\nexport default Movie","import React, { Component } from 'react'; \nimport './App.css';\nimport Movie from './Movie.js'\n\nclass App extends Component {\n  state = {\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n    console.log(this.state)\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  componentDidMount(){\n    this._getMovies()\n  }\n\n  _renderMovies = () => {\n    var movies = this.state.movies.map(movie => {\n      return <Movie \n      title={movie.title} \n      poster={movie.medium_cover_image} \n      genre={movie.genres} \n      summary = {movie.summary} \n      key={movie.id} />\n    })\n    return movies\n  }\n\n  render() {\n    return (\n      <div className=\"App\">  \n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}